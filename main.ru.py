from pydantic import BaseModel, EmailStr, Field, ValidationError, model_validator
import json

class Address(BaseModel):
    city: str = Field(...,
                      min_length=2,
                      description="city: —Å—Ç—Ä–æ–∫–∞, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
                      )
    street: str = Field(...,
                        min_length=3,
                        description="street: —Å—Ç—Ä–æ–∫–∞, –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
                        )
    house_number: int = Field(...,
                              ge=1,
                              description="—á–∏—Å–ª–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
                              )

class User(BaseModel):
    name: str = Field(...,
                      min_length=2,
                      max_length=120,
                      pattern=r'^[a-zA-Z–ê-–Ø–∞-—è–Å—ë\- ]+$',
                      description="—Å—Ç—Ä–æ–∫–∞, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")

    age: int = Field(...,
                     ge=0,
                     le=65,
                     description="—á–∏—Å–ª–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 65."
                     )
    email: EmailStr
    is_employed: bool
    address: Address

    @model_validator(mode="before")
    def check_employment_status(cls, values):
        age = values.get('age')
        is_employed = values.get('is_employed')
        if is_employed and not (18 <= age <= 65):
            raise ValueError("–≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 65 –ª–µ—Ç.")
        return values

def validate_and_serialize_user(json_str: str):
    try:
        user = User.model_validate_json(json_str)
        return user.model_dump_json(indent=4)
    except ValidationError as e:
        return json.dumps({"errors": e.errors()}, indent=4)

json_users = """[
    {
        "name": "–ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤",
        "age": 45,
        "email": "ivan.smirnov@gmail.com",
        "is_employed": true,
        "address": {
            "city": "–û–¥–µ—Å—Å–∞",
            "street": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
            "house_number": 12
        }
    },
    {
        "name": "–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
        "age": 99,
        "email": "elena.ivanova@gmail.com",
        "is_employed": false,
        "address": {
            "city": "–ù–∏–∫–æ–ª–∞–µ–≤",
            "street": "–ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞",
            "house_number": 34
        }
    },
    {
        "name": "–°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤",
        "age": 50,
        "email": "sergey.petrov@gmail.com",
        "is_employed": true,
        "address": {
            "city": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
            "street": "–õ–µ–Ω–∏–Ω–∞",
            "house_number": 56
        }
    },
    {
        "name": "–ú–∞—Ä–∏–Ω–∞ –ö—É—Ä—Ü",
        "age": 99,
        "email": "marina.kurz@gmail.com",
        "is_employed": false,
        "address": {
            "city": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
            "street": "–ú–∞–ª—ã—à–µ–≤–∞",
            "house_number": 78
        }
    },
    {
        "name": "–ê –°",
        "age": 55,
        "email": "alexander.sokolov@gmail.com",
        "is_employed": true,
        "address": {
            "city": "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
            "street": "–û–∫–µ–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
            "house_number": 90
        }
    }
]"""

users = json.loads(json_users)

for i, user in enumerate(users, 1):
    result = validate_and_serialize_user(json.dumps(user))
    print(f"\nüîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          f" {i}:"
          f" result {result}:"
          f" {user['name']}")
